using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class AbilityBar : MonoBehaviour
{
    [SerializeField] GameObject abibar;

    //itemAbi will get changed in the player, so player needs
    //the abibar game componenet and each time the player hits
    //an xp item the player code will get game component and
    //its amount of xp then edit itemAbi (which is why itemAbi is public)
    public float itemAbi;
    public bool itemPicked;
    public bool barFull;
    public float maxLimit = 1.0f;
    public float minLimit = 0.0f;

    public Vector3 position;
    public Vector3 size;
    public Vector3 origPos;
    public Vector3 origSize;

    public IEnumerator ChangeBar(float scalar){
      yield return new WaitForSeconds(0.5f);
      float xsize = scalar+abibar.transform.localScale.x;
      size = new Vector3(position.x, 1.0f, 1.0f);
      if(xsize >= maxLimit){
        size = new Vector3(maxLimit, 1.0f, 1.0f);
      }else{
        size = new Vector3(xsize, 1.0f, 1.0f);
      }
      abibar.transform.localScale = size;
      abibar.transform.position = new Vector3(position.x+scalar, position.y, position.z);
    }

    public bool checkBar(){
      if(abibar.transform.localScale.x == maxLimit){
        return true;
      }
      return false;
    }

    public void useAbility(){
      abibar.transform.localScale = new Vector3(0.0f, 1.0f, 1.0f);
      abibar.transform.position = origPos;
      barFull = false;
      Debug.Log("Used ability");
    }
    // Start is called before the first frame update
    void Start()
    {
      origPos = abibar.transform.position;
      origSize = abibar.transform.position;
      position = abibar.transform.position;
      itemAbi = 0;
      itemPicked = false;
      barFull = false;
      StartCoroutine(ChangeBar(minLimit));
    }

    // Update is called once per frame
    void Update()
    {
        position = abibar.transform.position;

        if(itemPicked == true){
          StartCoroutine(ChangeBar(itemAbi));
          itemAbi = 0;
          itemPicked = false;
        }

        if(checkBar()){
          barFull = true;
        }

        if(Input.GetKeyDown(KeyCode.Q) && barFull){
          useAbility();
        }
    }
}
